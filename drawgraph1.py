import matplotlib.pyplot as plt
import numpy as np

# 内置文件数据
file_content = """
1.1) 74249781.444444 0.000292 
1.2) 74215557.777778 0.000132 
1.3) 74233023.000000 0.000531 
1.4) 74208305.222222 0.000476 
1.5) 74258133.333333 0.000534 
1.6) 74247971.222222 0.000561 
1.7) 74243047.666667 0.000470 
1.8) 74225771.000000 0.000181 
1.9) 74205198.000000 0.000087 
2.1) 102038349.400000 0.004650
2.2) 102188531.600000 0.005043
2.3) 101749402.400000 0.005236
2.4) 102075371.200000 0.005290
2.5) 101881493.200000 0.004888
2.6) 101882737.000000 0.004700
2.7) 102028441.200000 0.004940
2.8) 101930865.600000 0.003748
2.9) 102403408.400000 0.004526
3.1) 103891905.200000 0.009569
3.2) 104235505.000000 0.007870
3.3) 104212708.800000 0.007874
3.4) 104278648.600000 0.007498
3.5) 102112832.600000 0.005297
3.6) 101891692.000000 0.003922
3.7) 102226769.200000 0.005192
3.8) 104301313.400000 0.007362
3.9) 104291147.800000 0.007276
4.1) 774905.800000 0.002227
4.2) 775983.000000 0.001767
4.3) 773977.700000 0.003141
4.4) 773486.200000 0.001698
4.5) 774996.200000 0.002073
4.6) 773227.700000 0.001528
4.7) 773880.700000 0.004140
4.8) 773420.900000 0.002761
4.9) 773734.700000 0.002642
5.1) 775821.800000 0.001166
5.2) 777072.300000 0.000950
5.3) 777404.300000 0.000714
5.4) 777396.600000 0.000823
5.5) 776057.900000 0.001050
5.6) 777093.000000 0.000853
5.7) 776902.300000 0.000977
5.8) 776696.700000 0.000758
5.9) 776510.200000 0.000740
6.1) 1889797.100000 0.018176
6.2) 1867875.400000 0.001716
6.3) 1866093.000000 0.001691
6.4) 1865101.500000 0.001232
6.5) 1863895.600000 0.001019
6.6) 1867762.300000 0.000601
6.7) 1872516.800000 0.008109
6.8) 1869943.600000 0.001698
6.9) 1869354.800000 0.002232
7.1) 2013726.800000 0.006356
7.2) 2029417.800000 0.001950
7.3) 1979677.800000 0.014877
7.4) 1967689.700000 0.013046
7.5) 2016120.900000 0.008786
7.6) 1992160.700000 0.016936
7.7) 1998205.000000 0.016594
7.8) 2022465.900000 0.013338
7.9) 2025930.300000 0.002914
8.1) 1952172.900000 0.002668
8.2) 1950268.200000 0.001226
8.3) 1947833.200000 0.000381
8.4) 1957044.400000 0.007578
8.5) 1948489.800000 0.000625
8.6) 1954542.300000 0.003214
8.7) 1950100.000000 0.000897
8.8) 1956433.300000 0.004416
8.9) 1949754.100000 0.001301
9.1) 2017903.300000 0.009417
9.2) 2050145.900000 0.026038
9.3) 2042320.200000 0.016613
9.4) 2072164.400000 0.030860
9.5) 2019474.600000 0.008936
9.6) 2019026.300000 0.011018
9.7) 2025837.400000 0.010981
9.8) 2042545.900000 0.018229
9.9) 2021636.100000 0.008922
""".strip().split('\n')

# 解析数据
groups = {i: {'x': [], 'y': []} for i in range(1, 10)}

for line in file_content:
    if not line.strip():
        continue
    parts = line.split()
    group_num = int(parts[0].split('.')[0])
    x_val = float(parts[1])
    y_val = float(parts[2])
    groups[group_num]['x'].append(x_val)
    groups[group_num]['y'].append(y_val)

# 可视化设置
markers = ['o', 'v', '^', '<', '>', 's', 'p', '*', 'D']
colors = plt.cm.tab10(np.linspace(0, 1, 9))
plt.figure(figsize=(16, 9))

# 绘制所有组
for group in range(1, 10):
    plt.scatter(
        groups[group]['x'],
        groups[group]['y'],
        marker=markers[group-1],
        color=colors[group-1],
        s=80,
        edgecolor='w',
        linewidth=0.8,
        label=f'Group {group}',
        alpha=0.8
    )

# 增强可视化
plt.yscale('log')
plt.xscale('log')
plt.title('9 Groups Scatter Plot (Log-Log Scale)', fontsize=14)
plt.xlabel('mean time (us)', fontsize=12)
plt.ylabel('margin of error/mean (Log Scale)', fontsize=12)
plt.grid(True, which='both', linestyle=':', alpha=0.6)
plt.legend(bbox_to_anchor=(1.12, 1), loc='upper right', frameon=False)

# 优化布局
plt.tight_layout()
plt.show()
